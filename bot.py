import sqlite3
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='6130355398:AAE3xEdR7kRPUOaaIeoGB6DjG3W1GQBQTH8')
dp = Dispatcher(bot)


# Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_callback_handler(query: types.CallbackQuery):
    button_text = query.data

    if button_text == 'call_phone':
        phone = '+996508145050'
        await query.message.answer_contact(phone, first_name='Softech')

    if button_text == 'discounts':
        await show_discount_item_info(query.message, button_text)
    
    if button_text == 'maps':
        latitude = 42.87526958560487 
        longitude = 74.58539928084825  
        await bot.send_location(chat_id=1115405384, latitude=latitude, longitude=longitude)

        
    
    if button_text == 'smartphones':
        await query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞:',
                                   reply_markup=generate_brand_keyboard())

    elif button_text =='iphone':
        await show_iphone_model_info(query.message, button_text)

    elif button_text =='nothing_phone':
        await show_nothin_phone_model_info(query.message, button_text)

    elif button_text == 'xiaomi':
         await show_xiaomi_phone_model_info(query.message, button_text)

    
    
    # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await query.answer()






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤
def generate_brand_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton(text='iphone üçè', callback_data='iphone'),
                 InlineKeyboardButton(text='Xiaomi', callback_data='xiaomi'),
                 InlineKeyboardButton(text='Realme', callback_data='realme'),
                 InlineKeyboardButton(text='Nothing', callback_data='nothing_phone'))

    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
async def show_iphone_model_info(message: types.Message, brand):
    conn = sqlite3.connect('softech_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT model, context, price, link, img FROM iphone")
    models = cursor.fetchall()

    for model in models:
        model_name = model[0]
        model_context = model[1]
        model_price = model[2]
        model_link = model[3]
        model_img = model[4]

        await message.answer_photo(model_img)
        await message.answer(text=f'–ú–æ–¥–µ–ª—å: {model_name}\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {model_context}\n'
                                  f'–¶–µ–Ω–∞: {model_price}\n',
                             reply_markup=generate_link_button(model_link))

    conn.close()


async def show_xiaomi_phone_model_info(message: types.Message, brand):
    conn = sqlite3.connect('softech_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT model, context, price, link, img FROM xiaomi")
    models = cursor.fetchall()

    for model in models:
        model_name = model[0]
        model_context = model[1]
        model_price = model[2]
        model_link = model[3]
        model_img = model[4]

        await message.answer_photo(model_img)
        await message.answer(text=f'–ú–æ–¥–µ–ª—å: {model_name}\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {model_context}\n'
                                  f'–¶–µ–Ω–∞: {model_price}\n',
                             reply_markup=generate_link_button(model_link))

    conn.close()


async def show_nothin_phone_model_info(message: types.Message, brand):
    conn = sqlite3.connect('softech_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT model, context, price, link, img FROM nothing_phone")
    models = cursor.fetchall()

    for model in models:
        model_name = model[0]
        model_context = model[1]
        model_price = model[2]
        model_link = model[3]
        model_img = model[4]

        await message.answer_photo(model_img)
        await message.answer(text=f'–ú–æ–¥–µ–ª—å: {model_name}\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {model_context}\n'
                                  f'–¶–µ–Ω–∞: {model_price}\n',
                             reply_markup=generate_link_button(model_link))

    conn.close()

async def show_discount_item_info(message: types.Message, brand):
    conn = sqlite3.connect('softech_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT model, price_new, price_old, price_sale, description,link, img FROM discount_items")
    models = cursor.fetchall()

    for model in models:
        model_name = model[0]
        model_price_new = model[1]
        model_price_old = model[2]
        model_price_sale = model[3]
        model_description = model[4]
        model_link = model[5]
        model_img = model[6]
        
        await message.answer_photo(model_img)
        await message.answer(text=f'–ú–æ–¥–µ–ª—å: {model_name}\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {model_description}\n'
                                  f'üìà C—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {model_price_old}\n'
                                  f'üìâ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {model_price_new}\n'
                                  f'C–∫–∏–¥–∫–∞: {model_price_sale}\n',
                             reply_markup=generate_link_button(model_link))

    conn.close()


    


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏
def generate_link_button(link):
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url=link)
    keyboard.add(button)
    return keyboard


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-—Ñ—É–Ω–∫—Ü–∏–∏
dp.register_callback_query_handler(button_callback_handler)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start', 'menu'])
async def handle_start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton(text='üéÅ  –°–∫–∏–¥–∫–∏  üéÅ', callback_data='discounts'))
    keyboard.add(InlineKeyboardButton(text='üì±  –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã  üì±', callback_data='smartphones'))
    keyboard.add(InlineKeyboardButton(text='üì∫  –¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã  üì∫', callback_data='tv'))
    keyboard.add(InlineKeyboardButton(text='üíª  –ù–æ—É—Ç–±—É–∫–∏  üíª', callback_data='laptop'))
    keyboard.add(InlineKeyboardButton(text='üèÆ  –ü—Ä–æ–¥—É–∫—Ü–∏—è Xiaomi  üèÆ', callback_data='xiaomiProduction'))
    keyboard.add(InlineKeyboardButton(text='üçé  –ü—Ä–æ–¥—É–∫—Ü–∏—è Apple  üçé' , callback_data='xiaomiProduction'))
    keyboard.add(InlineKeyboardButton(text='üî•  –ú—É–ª—å—Ç–∏–±—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã  üî•', callback_data='xiaomiProduction'))
    keyboard.add(InlineKeyboardButton(text='üìû  –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∑–≤–æ–Ω–∫—É  üìû', callback_data='call_phone'))
    keyboard.add(InlineKeyboardButton(text='üìå  –ù–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ  üìå', callback_data='maps'))
 

    await message.answer(text='–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ–Ω—é Softech!\n –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:', reply_markup=keyboard)


async def main():
    await dp.start_polling()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())


# change checking







